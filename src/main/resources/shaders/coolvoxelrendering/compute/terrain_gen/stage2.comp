#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "./voxel_list.glsl"
#include "../noise.glsl"


// Supply a high default value because we can only go lower when used to supply array sizes...
layout (constant_id = 0) const uint BUFFER_COUNT = 512;
layout (constant_id = 1) const uint BYTES_PER_VOXEL = 4;
const uint VOXELS_PER_CHUNK = 16 * 16 * 16;

const int SOIL_DEPTH = 4;


layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;


layout (set = 0, binding = 3) buffer ChunkDataBuffer { int data[]; } chunkDataBuffer[BUFFER_COUNT];


layout (push_constant) uniform PushConstants {
    uint chunkBufferIndex;
    uint chunkIndex;
    int chunkX;
    int chunkY;
    int chunkZ;

    int surroundingChunkIndices[6];
};


void outputVoxel(uint index, int id) {
    chunkDataBuffer[chunkBufferIndex].data[index] = id;
}

int getVoxelAt(uint index) {
    return chunkDataBuffer[chunkBufferIndex].data[index];
}

void main() {
    uint chunkFirstBlock = (BYTES_PER_VOXEL * VOXELS_PER_CHUNK * chunkIndex) / 4;

    ivec3 chunkPosition = ivec3(chunkX, chunkY, chunkZ);

    ivec3 blockLocalPos = ivec3(gl_GlobalInvocationID.zxy); // Don't even ask pls...
    uint blockIndex = blockLocalPos.x + (blockLocalPos.y * 16) + (blockLocalPos.z * 16 * 16);
    ivec3 blockGlobalPos = (chunkPosition * 16) + blockLocalPos;

    uint blockGlobalIndex = chunkFirstBlock + blockIndex;

    // Terrain gen here
    vec3 pos = vec3(blockGlobalPos);

    int currentVoxel = getVoxelAt(blockGlobalIndex);

    if (currentVoxel == 0) return;

    for (int i = 1; i <= SOIL_DEPTH; i++) {
        ivec3 nextPos = ivec3(blockLocalPos);
        nextPos.y = nextPos.y + i;
        if (nextPos.y > 15) {
            if (i < 2) // Flags this voxel so that it will be double checked by the CPU later
                outputVoxel(blockGlobalIndex, 1 | (1 << 16));
            break;
        }
        uint nextBlockIndex = nextPos.x + (nextPos.y * 16) + (nextPos.z * 16 * 16);
        uint nextBlockGlobalIndex = chunkFirstBlock + nextBlockIndex;
        int voxelID = getVoxelAt(nextBlockGlobalIndex);

        // TODO: Fetch voxel ID by index instead of using the index itself
        if (voxelID == VOID_VOXEL_INDEX) {
            if (i == 1) { outputVoxel(blockGlobalIndex, GRASS_VOXEL_INDEX); } else { outputVoxel(blockGlobalIndex, DIRT_VOXEL_INDEX); }
            break;
        }
    }
}