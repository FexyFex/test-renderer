#version 460
#extension GL_EXT_ray_tracing : require

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba8) uniform image2D image;
layout(set = 0, binding = 2) uniform CameraProperties {
	mat4 viewInverse;
	mat4 projInverse;
} cam;
layout(set = 0, binding = 3) buffer DebugBuffer { float arr[]; } debugBuffer;

layout(location = 0) rayPayloadEXT vec3 hitValue;

void main() {
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	//vec3 origin = vec3(cam.viewInverse[3][0], cam.viewInverse[3][1], cam.viewInverse[3][2]);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

	float tmin = 0.001;
	float tmax = 10000.0;

	vec2 meh = inUV - vec2(0.5);

	if (meh.x < 0.01 && meh.y < 0.01) {
		debugBuffer.arr[0] = origin.x;
		debugBuffer.arr[1] = origin.y;
		debugBuffer.arr[2] = origin.z;

		debugBuffer.arr[3] = direction.x;
		debugBuffer.arr[4] = direction.y;
		debugBuffer.arr[5] = direction.z;
	}

    hitValue = vec3(0.0);

    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));
}