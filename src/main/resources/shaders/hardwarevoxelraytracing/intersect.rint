#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#include "./intersection_lib.glsl"

layout (constant_id = 0) const int EXTENT = 16;


layout(set = 0, binding = 3) buffer DebugBuffer { float arr[]; } debugBuffer;
layout(set = 0, binding = 4) buffer AABBs { AABB arr[]; } aabbs;
layout(set = 0, binding = 5) buffer OctreeBuffer { int arr[]; } octreeBuffer;

hitAttributeEXT vec3 hitPosition;


int getOctantIndexOfPositionFromMipLevel(vec3 globalPos, int mipLevel) {
    int mipExtent = EXTENT >> mipLevel;
    vec3 rel = floor(globalPos / mipExtent);
    vec3 mid = (rel * mipExtent) + (mipExtent / 2.0);
    int x = int(globalPos.x >= mid.x);
    int y = int(globalPos.y >= mid.y);
    int z = int(globalPos.z >= mid.z);
    return x | (y << 1) | (z << 2);
}

/*
OctantData traverseSVO() {
    vec3 entryPoint = entryPointOfRayIntoChunk; //TODO: determine
    vec3 rayDirection = gl_WorldRayDirectionEXT;
    int octantIndex = rootNodeIndex; //TODO: 0 or something else?
    while (true) {
        if (isOpaque(octantIndex)) {
            return getData(octantIndex);
        } else if (hasChildren(octantIndex)) {
            octantIndex = child.that.contains.entryPoint; //TODO: determine correct child node
        } else {
            vec3 exitPoint = entryPoint + t * rayDirection; //TODO: determine t
            octantIndex = octantIndex.behind.exitPoint; //TODO: determine correct sibling node
            entryPoint = exitPoint;
        }
    }
}
*/

float minComponent(vec3 target) {
    return min(min(target.x, target.y), target.z);
}

void main() {
    Ray ray;
    ray.origin.xyz = gl_WorldRayOriginEXT;
    ray.dir.xyz = gl_WorldRayDirectionEXT;

    AABB aabb = aabbs.arr[gl_PrimitiveID];

    IntersectResult result = getIntersectionRayToAABB(ray, aabb);

    if (result.hit == TRUE) {
        hitPosition = result.coord;
        reportIntersectionEXT(minComponent(hitPosition), 0);
    }
}

