#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "./constants.glsl"
#include "./routines/routine_falling.glsl"
#include "./routines/routine_attraction.glsl"
#include "./routines/routine_linear.glsl"

struct WorldInfo {
    vec2 cameraPosition;
    vec2 cameraExtent;
    uint tickCounter;
};

struct ParticleInitialData {
    vec2 spawnPosition;
    uint spawnTimeStamp;
    uint lifetime;
    uint behaviourID;
    uint visualID;
};

struct ParticleData {
    vec2 position;
    int timeLived;
    uint visualID;
    float rotation;
};

// Supply a high default value because we can only go lower when used to supply array sizes...
layout (constant_id = 0) const int BUFFER_COUNT = 512;
layout (constant_id = 2) const int FRAMES_TOTAL = 5;

// local_size_x_id = 1 means that the workgroup size is supplied through the specialization constant that has id = 1
layout (local_size_x_id = 1, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform UBO { WorldInfo info; } worldInfoBuffer;
layout (set = 0, binding = 1) writeonly buffer FinalDataBuffer { ParticleData data[]; } finalPositionBuffer[BUFFER_COUNT];

layout (push_constant) uniform PushConstants {
    uint initDataBufferIndex;
    uint finalParticleDataBufferIndex;
    uint frameIndex;
};

void main() {
    uint particleIndex = gl_GlobalInvocationID.x;

    ParticleInitialData initData = initialDataBuffer[initDataBufferIndex].data[particleIndex];
    uint timeLived = worldInfoBuffer[frameIndex].info.tickCounter - initData.spawnTimeStamp;

    vec2 newPos;
    switch (initData.behaviourID) {
        case 0:
            newPos = linear(initData.spawnPosition, vec2(0.01), timeLived);
            break;
        case 1:
            newPos = fall(initData.spawnPosition, vec2(0.0, -0.15), vec2(0.0, 0.002), timeLived);
            break;
    }

    ParticleData finalParticleData;
    finalParticleData.position = newPos;
    finalParticleData.timeLived = int(timeLived);
    finalParticleData.visualID = initData.visualID;

    if (timeLived > initData.lifetime) {
        finalParticleData.timeLived = -10; // any negative value signals a dead bullet
    }

    finalPositionBuffer[finalParticleDataBufferIndex].data[particleIndex] = finalParticleData;
}